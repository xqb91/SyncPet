/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.reportes;

import cl.starlabs.controladores.MascotaJpaController;
import cl.starlabs.controladores.PropietarioJpaController;
import cl.starlabs.herramientas.HerramientasRapidas;
import cl.starlabs.herramientas.HerramientasRut;
import cl.starlabs.modelo.Contraindicaciones;
import cl.starlabs.modelo.Examenes;
import cl.starlabs.modelo.Farmacos;
import cl.starlabs.modelo.Mascota;
import cl.starlabs.modelo.Patologias;
import cl.starlabs.modelo.Procedimientos;
import cl.starlabs.modelo.Propietario;
import cl.starlabs.modelo.Usuarios;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.ZapfDingbatsList;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.UIManager;

/**
 *
 * @author Victor Manuel Araya
 */
public class ReportePaciente extends javax.swing.JFrame {

    Usuarios usu = null;
    EntityManagerFactory emf = null;
    HerramientasRapidas hr = new HerramientasRapidas();
    HerramientasRut hq = new HerramientasRut();

    public ReportePaciente() {
        initComponents();
        this.setLocationRelativeTo(null);
        Calendar cal = new GregorianCalendar();
        txtNombreSalida.setText("C:\\reporte" + new SimpleDateFormat("ddMMyyyyhhmmss").format(cal.getTime()) + ".pdf");
        txtNombreSalida.setEditable(false);
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        deshabilitar();
    }

    public ReportePaciente(Usuarios usu) {
        initComponents();
        this.setLocationRelativeTo(null);
        Calendar cal = new GregorianCalendar();
        txtNombreSalida.setText("C:\\reporte" + new SimpleDateFormat("ddMMyyyyhhmmss").format(cal.getTime()) + ".pdf");
        txtNombreSalida.setEditable(false);
        this.usu = usu;
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        deshabilitar();
    }

    public void deshabilitar() {
        hr.desactivar(cmbPaciente);
        hr.desactivar(txtNombreSalida);
        hr.desactivar(btnGenerarPDF);
    }

    public void habilitar() {
        hr.activar(cmbPaciente);
        hr.activar(txtNombreSalida);
        hr.activar(btnGenerarPDF);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombreSalida = new javax.swing.JTextField();
        btnGenerarPDF = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtRut = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        cmbPaciente = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SyncPet :: Reporte de Pacientes");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporte de Propietarios"));

        jLabel1.setText("Salida");

        btnGenerarPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/file_acrobat.gif"))); // NOI18N
        btnGenerarPDF.setText("Generar PDF");
        btnGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDFActionPerformed(evt);
            }
        });

        jLabel2.setText("Propietario");

        txtRut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRutFocusLost(evt);
            }
        });
        txtRut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRutKeyTyped(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/find.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel3.setText("Paciente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnGenerarPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbPaciente, 0, 170, Short.MAX_VALUE)
                                    .addComponent(txtRut))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(txtNombreSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombreSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGenerarPDF)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDFActionPerformed
        try {
            //creacion del documento con los margenes
            Document document = new Document(PageSize.A4, 35, 30, 50, 50);
            //creacion del archivo que se va a generar
            FileOutputStream fileOutputStream = new FileOutputStream(txtNombreSalida.getText());
            //obtener la instancia del pdfWriter
            PdfWriter.getInstance(document, fileOutputStream);
            //abrir el documento
            document.open();

            //--------------------------------------------------
            Image image = null;
            //obtencion de imagen logo de syncpet
            image = Image.getInstance("logo.png");
            image.scaleAbsolute(160f, 60f);

            //creacion de las fuentes para el contenido y titulos
            Font fontContenido = FontFactory.getFont(FontFactory.HELVETICA.toString(), 10, Font.NORMAL);
            Font fontDetalles = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE.toString(), 8, Font.NORMAL);
            Font fontTitulos = FontFactory.getFont(FontFactory.HELVETICA.toString(), 18, BaseColor.BLACK);
            Font fontSubtitulos = FontFactory.getFont(FontFactory.HELVETICA.toString(), 12, BaseColor.BLACK);
            // ---------------------------------------------------
            //creacion de una tabla
            PdfPTable table = new PdfPTable(1);
            //agregar la imagen anterior a una celda en la tabla
            PdfPCell cell = new PdfPCell(image);
            //propiedades de la celda
            cell.setColspan(5);
            cell.setBorderColor(BaseColor.WHITE);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //agregar la celda a la tabla
            table.addCell(cell);
            //agregar la tabla al documento
            document.add(table);

            //--- recuperando informacion
            Mascota mas = new MascotaJpaController(emf).findMascota(Integer.parseInt(hr.contenido(cmbPaciente).split(":")[0]));
            if (mas != null) {
                
            //-----------------------------------------------------
                //creacion del parrafo
                Paragraph paragraph = new Paragraph();
                //agregar un titulo con su respectiva fuente
                paragraph.setAlignment(Element.ALIGN_CENTER);
                paragraph.add(new Phrase("Reporte de Anamnesis de Paciente", fontTitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                Calendar cal = new GregorianCalendar();
                paragraph.add(new Phrase("Generado " + new SimpleDateFormat("dd-MMMM-yyyy HH:mm:ss").format(cal.getTime()).replace(" ", " a las ").replace("-", " de ") + ".", fontDetalles));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.setAlignment(Element.ALIGN_LEFT);
                paragraph.add(new Phrase("Paciente: "+mas.getNombre().toUpperCase(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Propietario: "+mas.getPropietario().getNombres()+" "+mas.getPropietario().getApaterno()+" "+mas.getPropietario().getAmaterno(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("RUN: "+mas.getPropietario().getRut()+"-"+mas.getPropietario().getDv(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Detalles", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Especie: "+mas.getRaza().getEspecie().getNombre().toUpperCase(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Raza: "+mas.getRaza().getNombre().toUpperCase(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Carácter: "+mas.getCaracter().getNombre().toUpperCase(), fontContenido));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase("Examenes Realizados", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                if(mas.getExamenesList().size() == 0) {
                    paragraph.add(new Phrase("Sin examenes realizados", fontDetalles));
                    paragraph.add(new Phrase(Chunk.NEWLINE));
                }else{
                    for(Examenes ex : mas.getExamenesList()) {
                        paragraph.add(new Phrase("Nombre: "+ex.getTipoExamen().getNombreExamen(), fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                        paragraph.add(new Phrase("Resultado: "+ex.getResultado(), fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                    }
                }
                paragraph.add(new Phrase(Chunk.NEWLINE));
                
                paragraph.add(new Phrase("Patologías Detectadas", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                if(mas.getPatologiasList().size() == 0) {
                    paragraph.add(new Phrase("Sin patologías detectadas", fontDetalles));
                    paragraph.add(new Phrase(Chunk.NEWLINE));
                }else{
                    for(Patologias ex : mas.getPatologiasList()) {
                        paragraph.add(new Phrase("* "+ex.getTipoPatologia().getNombrePatologia(), fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                    }
                }
                paragraph.add(new Phrase(Chunk.NEWLINE));
                
                paragraph.add(new Phrase("Contraindicaciones", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                if(mas.getContraindicacionesList().size() == 0) {
                    paragraph.add(new Phrase("Sin contraindicaciones detectadas", fontDetalles));
                    paragraph.add(new Phrase(Chunk.NEWLINE));
                }else{
                    for(Contraindicaciones ex : mas.getContraindicacionesList()) {
                        paragraph.add(new Phrase("* "+ex.getTipoContraindicicacion().getNombreContraindicacion(), fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                    }
                }
                paragraph.add(new Phrase(Chunk.NEWLINE));
                
                paragraph.add(new Phrase("Fármacos Suministrados", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                if(mas.getFarmacosList().size() == 0) {
                    paragraph.add(new Phrase("Sin registro de fármacos suministrados", fontDetalles));
                    paragraph.add(new Phrase(Chunk.NEWLINE));
                }else{
                    for(Farmacos ex : mas.getFarmacosList()) {
                        paragraph.add(new Phrase("* "+ex.getFarmaco().getNombreComercial()+" ("+ex.getFarmaco().getPrincipioActivo()+")", fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                    }
                }
                paragraph.add(new Phrase(Chunk.NEWLINE));
                
                paragraph.add(new Phrase("Procedimientos Realizados", fontSubtitulos));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                if(mas.getProcedimientosList().size() == 0) {
                    paragraph.add(new Phrase("Sin registro de procedimientos realizados", fontDetalles));
                    paragraph.add(new Phrase(Chunk.NEWLINE));
                }else{
                    for(Procedimientos ex : mas.getProcedimientosList()) {
                        paragraph.add(new Phrase("* "+ex.getTipoProcedimiento().getNombreProcedimiento(), fontDetalles));
                        paragraph.add(new Phrase(Chunk.NEWLINE));
                    }
                }
                paragraph.add(new Phrase(Chunk.NEWLINE));
                
                paragraph.add(new Phrase(Chunk.NEWLINE));
                paragraph.add(new Phrase(Chunk.NEWLINE));
                document.add(paragraph);
                //--------------------------------------------------
                PdfPTable tabla = new PdfPTable(1);
                PdfPCell celda = new PdfPCell();

               
                document.add(tabla);
            //--------------------------------------------------
                // Crear tabla nueva con dos 

                // Cerrar el documento
                document.close();

                // Abrir el archivo
                File file = new File(txtNombreSalida.getText());
                Desktop.getDesktop().open(file);
                System.out.println("Reporte finalizado con exito");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage() + " -- " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_btnGenerarPDFActionPerformed

    private void txtRutKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRutKeyTyped
        hr.ingresaCaracteresRut(evt);
        hr.largoMaximo(txtRut, 12, evt);
    }//GEN-LAST:event_txtRutKeyTyped

    private void txtRutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRutFocusLost
        if (!hr.contenido(txtRut).isEmpty()) {
            hr.insertarTexto(txtRut, hq.formatear(hr.contenido(txtRut)));
            if (!hq.validar(hr.contenido(txtRut))) {
                hr.mostrarError("Rut invalido");
                txtRut.selectAll();
                hr.focus(txtRut);
                deshabilitar();
            } else {
                btnBuscarActionPerformed(null);
            }
        }
    }//GEN-LAST:event_txtRutFocusLost

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if (!hr.contenido(txtRut).isEmpty()) {
            hr.insertarTexto(txtRut, hq.formatear(hr.contenido(txtRut)));
            if (!hq.validar(hr.contenido(txtRut))) {
                hr.mostrarError("Rut invalido");
                txtRut.selectAll();
                hr.focus(txtRut);
                deshabilitar();
            } else {
                habilitar();
                Propietario pro = new PropietarioJpaController(emf).buscarPorRut(hr.contenido(txtRut));
                if (pro == null) {
                    hr.mostrarError("El propietario no está registrado");
                    deshabilitar();
                } else {
                    cmbPaciente.removeAllItems();
                    for (Mascota m : pro.getMascotaList()) {
                        hr.insertarTexto(cmbPaciente, m.getIdMascota() + ": " + m.getNombre());
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    public static String padRight(String s, int n) {
        return String.format("%1$-" + n + "s", s);
    }

    public static String padLeft(String s, int n) {
        return String.format("%1$" + n + "s", s);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportePaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportePaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportePaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportePaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportePaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGenerarPDF;
    private javax.swing.JComboBox cmbPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtNombreSalida;
    private javax.swing.JTextField txtRut;
    // End of variables declaration//GEN-END:variables
}
