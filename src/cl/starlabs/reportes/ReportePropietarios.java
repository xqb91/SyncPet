/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.reportes;

import cl.starlabs.controladores.PropietarioJpaController;
import cl.starlabs.modelo.Mascota;
import cl.starlabs.modelo.Propietario;
import cl.starlabs.modelo.Usuarios;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.ZapfDingbatsList;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.UIManager;

/**
 *
 * @author Victor Manuel Araya
 */
public class ReportePropietarios extends javax.swing.JFrame {

    Usuarios usu = null;
    EntityManagerFactory emf = null;
    
    public ReportePropietarios() {
        initComponents();
        this.setLocationRelativeTo(null);
        Calendar cal = new GregorianCalendar();
        txtNombreSalida.setText("C:\\reporte" + new SimpleDateFormat("ddMMyyyyhhmmss").format(cal.getTime()) + ".pdf");
        txtNombreSalida.setEditable(false);
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
    }
    
    public ReportePropietarios(Usuarios usu) {
        initComponents();
        this.setLocationRelativeTo(null);
        Calendar cal = new GregorianCalendar();
        txtNombreSalida.setText("C:\\reporte" + new SimpleDateFormat("ddMMyyyyhhmmss").format(cal.getTime()) + ".pdf");
        txtNombreSalida.setEditable(false);
        this.usu = usu;
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombreSalida = new javax.swing.JTextField();
        btnGenerarPDF = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SyncPet :: Reporte de Propietarios");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporte de Propietarios"));

        jLabel1.setText("Salida");

        btnGenerarPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/file_acrobat.gif"))); // NOI18N
        btnGenerarPDF.setText("Generar PDF");
        btnGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombreSalida)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGenerarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 43, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombreSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnGenerarPDF, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDFActionPerformed
        try {
            //creacion del documento con los margenes
            Document document = new Document(PageSize.A4, 35, 30, 50, 50);
            //creacion del archivo que se va a generar
            FileOutputStream fileOutputStream = new FileOutputStream(txtNombreSalida.getText());
            //obtener la instancia del pdfWriter
            PdfWriter.getInstance(document, fileOutputStream);
            //abrir el documento
            document.open();

            //--------------------------------------------------
            Image image = null;
            //obtencion de imagen logo de syncpet
            image = Image.getInstance("logo.png");
            image.scaleAbsolute(160f, 60f);

            //creacion de las fuentes para el contenido y titulos
            Font fontContenido = FontFactory.getFont(FontFactory.HELVETICA.toString(), 10, Font.NORMAL);
            Font fontDetalles = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE.toString(), 8, Font.NORMAL);
            Font fontTitulos = FontFactory.getFont(FontFactory.HELVETICA.toString(), 18, BaseColor.BLACK);
            Font fontSubtitulos = FontFactory.getFont(FontFactory.HELVETICA.toString(), 12, BaseColor.BLACK);
            // ---------------------------------------------------
            //creacion de una tabla
            PdfPTable table = new PdfPTable(1);
            //agregar la imagen anterior a una celda en la tabla
            PdfPCell cell = new PdfPCell(image);
            //propiedades de la celda
            cell.setColspan(5);
            cell.setBorderColor(BaseColor.WHITE);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //agregar la celda a la tabla
            table.addCell(cell);
            //agregar la tabla al documento
            document.add(table);

            //-----------------------------------------------------
            //creacion del parrafo
            Paragraph paragraph = new Paragraph();
            //agregar un titulo con su respectiva fuente
            paragraph.setAlignment(Element.ALIGN_CENTER);
            paragraph.add(new Phrase("Detalle de Propietarios en Sistema", fontTitulos));
            paragraph.add(new Phrase(Chunk.NEWLINE));
            Calendar cal = new GregorianCalendar();
            paragraph.add(new Phrase("Generado "+ new SimpleDateFormat("dd-MMMM-yyyy HH:mm:ss").format(cal.getTime()).replace(" ", " a las ").replace("-", " de ")+".", fontDetalles));
            paragraph.add(new Phrase(Chunk.NEWLINE));
            paragraph.add(new Phrase(Chunk.NEWLINE));
            document.add(paragraph);
            //--------------------------------------------------
            PdfPTable tabla = new PdfPTable(1);
            PdfPCell celda = new PdfPCell();
                        
            for(Propietario pro : new PropietarioJpaController(emf).findPropietarioEntities()) {
                //cell = new PdfPCell();
                
                tabla.getDefaultCell().setBorderColor(BaseColor.WHITE);
                tabla.addCell(new Phrase("Propietario: "+pro.getRut()+"-"+pro.getDv()+": "+pro.getApaterno()+" "+pro.getAmaterno()+" "+pro.getNombres(), fontContenido));
                for(Mascota ma : pro.getMascotaList()) {
                    PdfPTable tabla2 = new PdfPTable(2);
                    tabla2.getDefaultCell().setBorderColor(BaseColor.WHITE);
                    tabla2.addCell(new Phrase("Nombre Paciente", fontDetalles));
                    tabla2.addCell(new Phrase(ma.getNombre(), fontDetalles));
                    tabla2.addCell(new Phrase("Fecha de Nacimiento", fontDetalles));
                    tabla2.addCell(new Phrase(new SimpleDateFormat("dd-MMMM-yyyy").format(ma.getFechaNacimiento()).replace("-", " de "), fontDetalles));
                    tabla2.addCell(new Phrase("Número de Chip", fontDetalles));
                    tabla2.addCell(new Phrase(ma.getNumeroChip()+"", fontDetalles));
                    tabla2.addCell(new Phrase("Especie", fontDetalles));
                    tabla2.addCell(new Phrase(ma.getRaza().getEspecie().getNombre()+"", fontDetalles));
                    tabla.addCell(tabla2);
                }
                //table.addCell(cell);
            }
            document.add(tabla);
            //--------------------------------------------------
            // Crear tabla nueva con dos 


            // Cerrar el documento
            document.close();

            // Abrir el archivo
            File file = new File(txtNombreSalida.getText());
            Desktop.getDesktop().open(file);
            System.out.println("Reporte finalizado con exito");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage()+" -- "+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_btnGenerarPDFActionPerformed

    
    public static String padRight(String s, int n) {
     return String.format("%1$-" + n + "s", s);  
}

    public static String padLeft(String s, int n) {
        return String.format("%1$" + n + "s", s);  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportePropietarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportePropietarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportePropietarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportePropietarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportePropietarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarPDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtNombreSalida;
    // End of variables declaration//GEN-END:variables
}
