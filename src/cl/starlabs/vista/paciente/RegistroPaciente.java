/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.vista.paciente;

import cl.starlabs.controladores.CaracterJpaController;
import cl.starlabs.controladores.EspecieJpaController;
import cl.starlabs.controladores.HabitadJpaController;
import cl.starlabs.controladores.MascotaJpaController;
import cl.starlabs.controladores.PropietarioJpaController;
import cl.starlabs.controladores.RazaJpaController;
import cl.starlabs.modelo.Caracter;
import cl.starlabs.modelo.Especie;
import cl.starlabs.modelo.Habitad;
import javax.swing.UIManager;
import cl.starlabs.modelo.Mascota;
import cl.starlabs.modelo.Propietario;
import cl.starlabs.modelo.Raza;
import cl.starlabs.modelo.Usuarios;
import java.awt.Color;
import java.math.BigInteger;
import java.util.GregorianCalendar;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
/**
 *
 * @author Victor Manuel Araya
 */
public class RegistroPaciente extends javax.swing.JFrame {

    Usuarios u = null;
    EntityManagerFactory emf = null;
    Propietario p = null;
    
    public RegistroPaciente() {
        initComponents();
        //deshabilitando campos que requieren seleccion
        slcRaza.setEnabled(false);
        btnBuscarPropietario.setEnabled(false);
        
        //centrando ventana
        this.setLocationRelativeTo(null);
        //seteando persistencia
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        //rellenando valores por defecto en campos
        
            txtFechaNacimiento.setDate(new GregorianCalendar().getTime());
        
            //rellenando especies
            for(Especie e : new EspecieJpaController(emf).findEspecieEntities()) {
                slcEspecie.addItem(e.getNombre());
            }
            
            //rellenando carácteres
            for(Caracter c : new CaracterJpaController(emf).findCaracterEntities()) {
               slcCaracter.addItem(c.getNombre());
            }
        
            //rellenando habitad
            for(Habitad h : new HabitadJpaController(emf).findHabitadEntities()) {
                slcHabitad.addItem(h.getNombre());
            }
    }
    
    public RegistroPaciente(Usuarios us) {
        initComponents();
        //centrando ventana
        this.setLocationRelativeTo(null);
        //seteando valores
        this.u = us;
        //deshabilitando campos que requieren seleccion
        slcRaza.setEnabled(false);
        btnBuscarPropietario.setEnabled(false);
        
        //seteando persistencia
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        //rellenando valores por defecto en campos
            
            txtFechaNacimiento.setDate(new GregorianCalendar().getTime());
            
            //rellenando especies
            for(Especie e : new EspecieJpaController(emf).findEspecieEntities()) {
                slcEspecie.addItem(e.getNombre());
            }
            
            //rellenando carácteres
            for(Caracter c : new CaracterJpaController(emf).findCaracterEntities()) {
               slcCaracter.addItem(c.getNombre());
            }
        
            //rellenando habitad
            for(Habitad h : new HabitadJpaController(emf).findHabitadEntities()) {
                slcHabitad.addItem(h.getNombre());
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDatosPaciente = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtFechaNacimiento = new com.toedter.calendar.JDateChooser();
        slcRaza = new javax.swing.JComboBox();
        slcEspecie = new javax.swing.JComboBox();
        slcCaracter = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        slcSexo = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtChip = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        slcHabitad = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        slcGrupoSanguineo = new javax.swing.JComboBox();
        panelTomaImagen = new javax.swing.JPanel();
        lblImagenPaciente = new javax.swing.JLabel();
        btnCargarImagen = new javax.swing.JButton();
        btnTomarImagen = new javax.swing.JButton();
        btnGuardarImagen = new javax.swing.JButton();
        btnCancelarImagen = new javax.swing.JButton();
        panelInfoPropietario = new javax.swing.JPanel();
        lblInfoPropietario = new javax.swing.JLabel();
        btnBuscarPropietario = new javax.swing.JButton();
        txtRut = new javax.swing.JTextField();
        lblRutPropp = new javax.swing.JLabel();
        btnCancelarRegistro = new javax.swing.JButton();
        btnGuardarPaciente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SyncPet :: Registro de Paciente");
        setResizable(false);

        panelDatosPaciente.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Paciente"));

        jLabel1.setText("Nombre");

        jLabel2.setText("Raza");

        jLabel3.setText("Especie");

        jLabel5.setText("Caracter");

        jLabel6.setText("Fecha de Nacimiento");

        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        slcRaza.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));

        slcEspecie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));
        slcEspecie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                slcEspecieFocusLost(evt);
            }
        });
        slcEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slcEspecieActionPerformed(evt);
            }
        });

        slcCaracter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));

        jLabel8.setText("Sexo");

        slcSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Hembra", "Macho", "Hermafrodita" }));

        jLabel10.setText("# Chip");

        txtChip.setText("0");
        txtChip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtChipKeyTyped(evt);
            }
        });

        jLabel11.setText("Habitad");

        slcHabitad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));

        jLabel15.setText("Grupo Sanguíneo");

        slcGrupoSanguineo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "DEA", "A", "AB", "B", "C", "D", "F", "J", "K", "L", "M", "R", "S", "T", "P", "Q", "U", "Z" }));

        javax.swing.GroupLayout panelDatosPacienteLayout = new javax.swing.GroupLayout(panelDatosPaciente);
        panelDatosPaciente.setLayout(panelDatosPacienteLayout);
        panelDatosPacienteLayout.setHorizontalGroup(
            panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(67, 67, 67)
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slcRaza, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(slcEspecie, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)))
                    .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(61, 61, 61)
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                                .addComponent(slcSexo, 0, 83, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChip, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(slcCaracter, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel11))
                        .addGap(21, 21, 21)
                        .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slcHabitad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(slcGrupoSanguineo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelDatosPacienteLayout.setVerticalGroup(
            panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPacienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slcEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slcRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(slcCaracter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(slcSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtChip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slcHabitad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDatosPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(slcGrupoSanguineo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelTomaImagen.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen del Paciente"));

        lblImagenPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/sistema/mascota_desconocida.png"))); // NOI18N

        btnCargarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/image_add.png"))); // NOI18N
        btnCargarImagen.setText("Cargar Foto");
        btnCargarImagen.setEnabled(false);

        btnTomarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/camera_add.png"))); // NOI18N
        btnTomarImagen.setText("Tomar Foto");
        btnTomarImagen.setEnabled(false);
        btnTomarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTomarImagenActionPerformed(evt);
            }
        });

        btnGuardarImagen.setText("Guardar Foto");
        btnGuardarImagen.setEnabled(false);

        btnCancelarImagen.setText("Cancelar");
        btnCancelarImagen.setEnabled(false);

        javax.swing.GroupLayout panelTomaImagenLayout = new javax.swing.GroupLayout(panelTomaImagen);
        panelTomaImagen.setLayout(panelTomaImagenLayout);
        panelTomaImagenLayout.setHorizontalGroup(
            panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTomaImagenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTomaImagenLayout.createSequentialGroup()
                        .addComponent(lblImagenPaciente)
                        .addGap(18, 18, 18)
                        .addGroup(panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCargarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTomarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelTomaImagenLayout.createSequentialGroup()
                        .addComponent(btnGuardarImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTomaImagenLayout.setVerticalGroup(
            panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTomaImagenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagenPaciente)
                    .addGroup(panelTomaImagenLayout.createSequentialGroup()
                        .addComponent(btnCargarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTomarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTomaImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarImagen)
                    .addComponent(btnCancelarImagen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInfoPropietario.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Propietario del Paciente")));

        lblInfoPropietario.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblInfoPropietario.setText("Propietario no definido");

        btnBuscarPropietario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/find.png"))); // NOI18N
        btnBuscarPropietario.setText("Buscar");
        btnBuscarPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPropietarioActionPerformed(evt);
            }
        });

        txtRut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRutFocusLost(evt);
            }
        });
        txtRut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRutKeyTyped(evt);
            }
        });

        lblRutPropp.setText("Propietario no definido");

        javax.swing.GroupLayout panelInfoPropietarioLayout = new javax.swing.GroupLayout(panelInfoPropietario);
        panelInfoPropietario.setLayout(panelInfoPropietarioLayout);
        panelInfoPropietarioLayout.setHorizontalGroup(
            panelInfoPropietarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoPropietarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoPropietarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoPropietarioLayout.createSequentialGroup()
                        .addComponent(lblInfoPropietario)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoPropietarioLayout.createSequentialGroup()
                        .addComponent(txtRut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscarPropietario))
                    .addGroup(panelInfoPropietarioLayout.createSequentialGroup()
                        .addComponent(lblRutPropp)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelInfoPropietarioLayout.setVerticalGroup(
            panelInfoPropietarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoPropietarioLayout.createSequentialGroup()
                .addGroup(panelInfoPropietarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPropietario)
                    .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfoPropietario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRutPropp)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnCancelarRegistro.setText("Cancelar");
        btnCancelarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarRegistroActionPerformed(evt);
            }
        });

        btnGuardarPaciente.setText("Guardar");
        btnGuardarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDatosPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTomaImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfoPropietario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelTomaImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelInfoPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelDatosPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarPaciente)
                    .addComponent(btnCancelarRegistro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTomarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTomarImagenActionPerformed

        
    }//GEN-LAST:event_btnTomarImagenActionPerformed

    private void btnBuscarPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPropietarioActionPerformed
        p = new PropietarioJpaController(emf).buscarPorRut(txtRut.getText());
        if(p == null) {
            JOptionPane.showMessageDialog(null, "No existen propietarios con rut "+txtRut.getText());
            txtRut.setText("");
            txtRut.requestFocus();
            btnBuscarPropietario.setEnabled(false);
            lblInfoPropietario.setText("Propietario no definido");
            lblRutPropp.setText("Propietario no definido");
        }else{
            lblInfoPropietario.setText(p.getNombres()+" "+p.getApaterno()+" "+p.getAmaterno());
            lblRutPropp.setText(cl.starlabs.herramientas.HerramientasRut.formatear(p.getRut()+""+p.getDv()));
        }
    }//GEN-LAST:event_btnBuscarPropietarioActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped

    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtChipKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChipKeyTyped
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtChipKeyTyped

    private void slcEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slcEspecieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_slcEspecieActionPerformed

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        txtNombre.setText(txtNombre.getText().toUpperCase());
    }//GEN-LAST:event_txtNombreFocusLost

    private void btnCancelarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarRegistroActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea salir sin guardar los cambios del registro de paciente?");
        if(opcion == 0) {
            //guardar cambios
            btnGuardarPacienteActionPerformed(evt);
        }else if(opcion == 1) {
            //no quiere guardar los cambios
            this.dispose();
        }
        
    }//GEN-LAST:event_btnCancelarRegistroActionPerformed

    private void slcEspecieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_slcEspecieFocusLost
        //buscar razas de la especie
        if(slcEspecie.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") != 0) {
            slcRaza.removeAllItems();
            slcRaza.addItem("Seleccione...");
            if((new EspecieJpaController(emf).buscarRaza(slcEspecie.getSelectedItem().toString())).getRazaList() != null) {
                for(Raza r : (new EspecieJpaController(emf).buscarRaza(slcEspecie.getSelectedItem().toString())).getRazaList() ) {
                    slcRaza.addItem(r.getNombre());
                }
                slcRaza.setEnabled(true);
            }else{
                slcRaza.setEnabled(false);
                slcRaza.removeAllItems();
                slcRaza.addItem("Seleccione...");
            }
        }else{
            slcRaza.setEnabled(false);
        }
        slcRaza.requestFocus();
    }//GEN-LAST:event_slcEspecieFocusLost

    private void txtRutKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRutKeyTyped
        //comprobacion de caracteres validos para ingreso de rut
        char c = evt.getKeyChar();
        if((!Character.isDigit(c)) && (!((c == 'K') || (c == 'k') || (c == '-') || (c == '.'))))
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtRutKeyTyped

    private void txtRutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRutFocusLost
        if(!txtRut.getText().isEmpty()) {
            //formatear rut
            txtRut.setText(cl.starlabs.herramientas.HerramientasRut.formatear(txtRut.getText()));
            //verificando que este correcto el rut
            if(cl.starlabs.herramientas.HerramientasRut.validar(txtRut.getText())) {
                btnBuscarPropietario.setEnabled(true);
                txtRut.setForeground(Color.black);
                btnBuscarPropietario.requestFocus();
            }else{
                btnBuscarPropietario.setEnabled(false);
                txtRut.setForeground(Color.red);
                txtRut.selectAll();
                txtRut.requestFocus();
            }
        }else{
            btnBuscarPropietario.setEnabled(false);
        }
    }//GEN-LAST:event_txtRutFocusLost

    private void btnGuardarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPacienteActionPerformed
        Mascota m = new Mascota();
        if(txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo de nombre de paciente esta vacío");
            txtNombre.requestFocus();
        }else{
            m.setNombre(txtNombre.getText());
            //comprobando
            if(slcEspecie.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                JOptionPane.showMessageDialog(null, "Seleccione la especie del paciente");
                slcEspecie.requestFocus();
            }else{
                if(slcRaza.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                    JOptionPane.showMessageDialog(null, "Seleccione la raza del paciente");
                    slcRaza.requestFocus();
                }else{
                    Raza r = new RazaJpaController(emf).buscarRaza(slcRaza.getSelectedItem().toString());
                    if(r == null) {
                        JOptionPane.showMessageDialog(null, "Error Grave: La raza del paciente no pudo ser verificada contra el sistema");
                        this.dispose();
                    }else{
                        m.setRaza(r);
                        //verificando
                        if(slcCaracter.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                            JOptionPane.showMessageDialog(null, "Seleccione el caracter del paciente");
                            slcCaracter.requestFocus();
                        }else{
                            Caracter c = new CaracterJpaController(emf).buscarCaracter(slcCaracter.getSelectedItem().toString());
                            if(c == null) {
                                JOptionPane.showMessageDialog(null, "Error Grave: El caracter del paciente no pudo ser verificado contra el sistema");
                                this.dispose();
                            }else{
                                m.setCaracter(c);
                                //verificando
                                if(slcSexo.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                    JOptionPane.showMessageDialog(null, "Seleccione el sexo del paciente");
                                }else{
                                    m.setSexo(slcSexo.getSelectedItem().toString().charAt(0));
                                    //verificando
                                    if(txtChip.getText().isEmpty()) {
                                        txtChip.setText("0");
                                    }
                                    m.setNumeroChip(Integer.parseInt(txtChip.getText()));
                                    
                                    //verificando
                                    if(slcHabitad.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                        JOptionPane.showMessageDialog(null, "Seleccione el habitad del paciente");
                                        slcHabitad.requestFocus();
                                    }else{
                                        Habitad h = new HabitadJpaController(emf).buscarHabitad(slcHabitad.getSelectedItem().toString());
                                        if(h == null) {
                                            JOptionPane.showMessageDialog(null, "Error Grave: El habitad del paciente no pudo ser verificado contra el sistema");
                                            this.dispose();
                                        }else{
                                            m.setHabitad(h);
                                            //verificando
                                            if(slcGrupoSanguineo.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                                JOptionPane.showMessageDialog(null, "Seleccione el grupo sanguíneo del paciente");
                                                slcGrupoSanguineo.requestFocus();
                                            }else{
                                                m.setGrupoSanguineo(slcGrupoSanguineo.getSelectedItem().toString());
                                                //verificando
                                                if(p == null) {
                                                    JOptionPane.showMessageDialog(null, "Debe especificar el propietario del paciente");
                                                    txtRut.requestFocus();
                                                }else{
                                                    m.setPropietario(p);
                                                    m.setFechaNacimiento(txtFechaNacimiento.getDate());
                                                    //registrar
                                                    m.setIdMascota(new MascotaJpaController(emf).ultimoRegistro());
                                                    try {
                                                        new MascotaJpaController(emf).create(m);
                                                        JOptionPane.showMessageDialog(null, "Paciente registrado");
                                                        this.dispose();
                                                    } catch (Exception e) {
                                                        JOptionPane.showMessageDialog(null, "Error al registrar paciente. SyncPet dijo: "+e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardarPacienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPropietario;
    private javax.swing.JButton btnCancelarImagen;
    private javax.swing.JButton btnCancelarRegistro;
    private javax.swing.JButton btnCargarImagen;
    private javax.swing.JButton btnGuardarImagen;
    private javax.swing.JButton btnGuardarPaciente;
    private javax.swing.JButton btnTomarImagen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblImagenPaciente;
    private javax.swing.JLabel lblInfoPropietario;
    private javax.swing.JLabel lblRutPropp;
    private javax.swing.JPanel panelDatosPaciente;
    private javax.swing.JPanel panelInfoPropietario;
    private javax.swing.JPanel panelTomaImagen;
    private javax.swing.JComboBox slcCaracter;
    private javax.swing.JComboBox slcEspecie;
    private javax.swing.JComboBox slcGrupoSanguineo;
    private javax.swing.JComboBox slcHabitad;
    private javax.swing.JComboBox slcRaza;
    private javax.swing.JComboBox slcSexo;
    private javax.swing.JTextField txtChip;
    private com.toedter.calendar.JDateChooser txtFechaNacimiento;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRut;
    // End of variables declaration//GEN-END:variables
}
